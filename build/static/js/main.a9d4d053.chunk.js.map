{"version":3,"sources":["tasks/actions.js","tasks/reducers.js","store.js","tasks/selectors.js","TodoList.js","App.js","index.js"],"names":["ADD_SMART_CONTRACT","CHANGE_FILTER_COMPLETED","CHANGE_ETH_COMMIT","STORE_TASKS","CREATE_TASK","TOGGLE_COMPLETED","TOGGLE_COMPLETED_TO_BE_CREATED","DELETE_TASK","DELETE_TASK_TO_BE_CREATED","initialState","contract","filterCompleted","ethCommit","tasks","tasksToCreate","tasksToDelete","reducers","taskState","state","action","type","payload","contractToAdd","tasksToStore","newTask","task","concat","id","timeModified","map","completed","content","date","filter","persistConfig","key","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","getFilterCompleted","getSmartContract","getEthCommit","getTasks","getTasksToCreate","getTasksToDelete","connect","smartContract","dispatch","setFilterCompleted","changeEthCommit","addSmartContract","storeTasksInRedux","storeTasks","createTaskInRedux","createTask","toggleCompletedInRedux","toggleCompleted","toggleCompletedToBeCreatedInRedux","toggleCompletedToBeCreated","deleteTaskInRedux","deleteTask","deleteTaskToBeCreatedInRedux","deleteTaskToBeCreated","useEffect","loadBlockchainData","useState","account","setAccount","setTaskCount","setContent","loading","setLoading","a","web3","Web3","givenProvider","eth","getAccounts","accounts","net","getId","networkId","deployedNetworks","TodoListContract","networks","todoList","Contract","abi","address","methods","taskCount","call","receivedTasks","i","push","fetchTasks","Date","now","send","from","once","receipt","taskId","console","log","commitTasks","checkTask","createTaskHandler","document","getElementById","classList","remove","toggleCompletedHandler","deleteTaskHandler","className","onSubmit","event","preventDefault","onChange","e","target","value","contains","add","placeholder","checked","disabled","style","marginLeft","onClick","toString","substring","length","App","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.a9d4d053.chunk.js","sourcesContent":["export const ADD_SMART_CONTRACT = \"ADD_SMART_CONTRACT\";\r\nexport const addSmartContract = contract => ({\r\n    type: ADD_SMART_CONTRACT,\r\n    payload: { contract }\r\n})\r\n\r\nexport const CHANGE_FILTER_COMPLETED = \"CHANGE_FILTER_COMPLETED\";\r\nexport const changeFilterCompleted = () => ({\r\n    type: CHANGE_FILTER_COMPLETED\r\n})\r\n\r\nexport const CHANGE_ETH_COMMIT = \"CHANGE_ETH_COMMIT\";\r\nexport const changeEthCommit = () => ({\r\n    type: CHANGE_ETH_COMMIT\r\n})\r\n\r\nexport const STORE_TASKS = \"STORE_TASKS\";\r\nexport const storeTasks = tasks => ({\r\n    type: STORE_TASKS,\r\n    payload: { tasks }\r\n})\r\n\r\nexport const CREATE_TASK = \"CREATE_TASK\";\r\nexport const createTask = task => ({\r\n    type: CREATE_TASK,\r\n    payload: { task }\r\n})\r\n\r\nexport const TOGGLE_COMPLETED = \"TOGGLE_COMPLETED\";\r\nexport const toggleCompleted = (id, timeModified) => ({\r\n    type: TOGGLE_COMPLETED,\r\n    payload: { id, timeModified }\r\n})\r\n\r\nexport const TOGGLE_COMPLETED_TO_BE_CREATED = \"TOGGLE_COMPLETED_TO_BE_CREATED\";\r\nexport const toggleCompletedToBeCreated = (id, content, date, timeModified) => ({\r\n    type: TOGGLE_COMPLETED_TO_BE_CREATED,\r\n    payload: { id, content, date, timeModified }\r\n})\r\n\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const deleteTask = id => ({\r\n    type: DELETE_TASK,\r\n    payload: { id }\r\n})\r\n\r\nexport const DELETE_TASK_TO_BE_CREATED = \"DELETE_TASK_TO_BE_CREATED\";\r\nexport const deleteTaskToBeCreated = (id, content, date) => ({\r\n    type: DELETE_TASK_TO_BE_CREATED,\r\n    payload: { id, content, date }\r\n})","import {\r\n    ADD_SMART_CONTRACT,\r\n    CHANGE_FILTER_COMPLETED,\r\n    CHANGE_ETH_COMMIT,\r\n    STORE_TASKS,\r\n    CREATE_TASK,\r\n    TOGGLE_COMPLETED,\r\n    TOGGLE_COMPLETED_TO_BE_CREATED,\r\n    DELETE_TASK,\r\n    DELETE_TASK_TO_BE_CREATED\r\n} from './actions';\r\n\r\nconst initialState = {\r\n    contract: null,\r\n    filterCompleted: false,\r\n    ethCommit: true,\r\n    tasks: [],\r\n    tasksToCreate: [],\r\n    tasksToDelete: []\r\n}\r\n\r\nexport const taskState = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case ADD_SMART_CONTRACT: {\r\n            const { contract: contractToAdd } = payload;\r\n            return {\r\n                ...state,\r\n                contract: contractToAdd,\r\n            }\r\n        }\r\n        case CHANGE_FILTER_COMPLETED: {\r\n            return {\r\n                ...state,\r\n                filterCompleted: !state.filterCompleted,\r\n            }\r\n        }\r\n        case CHANGE_ETH_COMMIT: {\r\n            return {\r\n                ...state,\r\n                ethCommit: !state.ethCommit,\r\n            }\r\n        }\r\n        case STORE_TASKS: {\r\n            const { tasks: tasksToStore } = payload;\r\n            return {\r\n                ...state,\r\n                tasks: tasksToStore,\r\n                tasksToCreate: [],\r\n                tasksToDelete: []\r\n            }\r\n        }\r\n        case CREATE_TASK: {\r\n            const { task: newTask } = payload;\r\n            return {\r\n                ...state,\r\n                tasksToCreate: state.tasksToCreate.concat(newTask),\r\n            }\r\n        }\r\n        case TOGGLE_COMPLETED: {\r\n            const { id, timeModified } = payload;\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map((task) => {\r\n                    if (task.id === id) {\r\n                        return {\r\n                            ...task,\r\n                            completed: !task.completed,\r\n                            timeModified: timeModified,\r\n                        }\r\n                    }\r\n                    return task\r\n                }),\r\n            }\r\n        }\r\n        case TOGGLE_COMPLETED_TO_BE_CREATED: {\r\n            const { id, content, date, timeModified } = payload;\r\n            return {\r\n                ...state,\r\n                tasksToCreate: state.tasksToCreate.map((task) => {\r\n                    if (task.id === id && task.content === content && task.date === date) {\r\n                        return {\r\n                            ...task,\r\n                            completed: !task.completed,\r\n                            timeModified: timeModified,\r\n                        }\r\n                    }\r\n                    return task\r\n                }),\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            const { id } = payload;\r\n            return {\r\n                ...state,\r\n                tasksToDelete: state.tasksToDelete.concat(\r\n                    state.tasks.filter(task => task.id === id)\r\n                ),\r\n                tasks: state.tasks.filter(task => task.id !== id),\r\n            }\r\n        }\r\n        case DELETE_TASK_TO_BE_CREATED: {\r\n            const { id, content, date } = payload;\r\n            return {\r\n                ...state,\r\n                tasksToCreate: state.tasksToCreate.filter(task => task.id !== id && task.content !== content && task.date !== date)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { taskState } from './tasks/reducers';\r\n\r\nconst reducers = { \r\n    taskState,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2\r\n}\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configStore = () => \r\n    createStore(\r\n        persistedReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(thunk)\r\n        )\r\n    );","import { createSelector } from 'reselect';\r\n\r\nexport const getFilterCompleted = state => state.taskState.filterCompleted;\r\nexport const getSmartContract = state => state.taskState.contract;\r\nexport const getEthCommit = state => state.taskState.ethCommit;\r\nexport const getTasks = state => state.taskState.tasks;\r\nexport const getTasksToCreate = state => state.taskState.tasksToCreate;\r\nexport const getTasksToDelete = state => state.taskState.tasksToDelete;","import { useEffect, useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  changeFilterCompleted,\r\n  changeEthCommit,\r\n  addSmartContract,\r\n  storeTasks,\r\n  createTask,\r\n  toggleCompleted,\r\n  toggleCompletedToBeCreated,\r\n  deleteTask,\r\n  deleteTaskToBeCreated\r\n} from './tasks/actions';\r\nimport {\r\n  getFilterCompleted,\r\n  getEthCommit,\r\n  getSmartContract,\r\n  getTasks,\r\n  getTasksToCreate,\r\n  getTasksToDelete\r\n} from './tasks/selectors';\r\nimport TodoListContract from './contracts/TodoList.json';\r\n\r\nimport './TodoList.css';\r\n\r\nconst TodoList = ({\r\n  filterCompleted,\r\n  ethCommit,\r\n  smartContract,\r\n  tasks,\r\n  tasksToCreate,\r\n  tasksToDelete,\r\n  setFilterCompleted,\r\n  changeEthCommit,\r\n  addSmartContract,\r\n  storeTasksInRedux,\r\n  createTaskInRedux,\r\n  toggleCompletedInRedux,\r\n  toggleCompletedToBeCreatedInRedux,\r\n  deleteTaskInRedux,\r\n  deleteTaskToBeCreatedInRedux\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    loadBlockchainData()\r\n  }, [])\r\n\r\n  const [account, setAccount] = useState('');\r\n  const [taskCount, setTaskCount] = useState(0);\r\n  const [content, setContent] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function loadBlockchainData() {\r\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\r\n    const accounts = await web3.eth.getAccounts()\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetworks = TodoListContract.networks[networkId];\r\n    const todoList = new web3.eth.Contract(TodoListContract.abi, deployedNetworks && deployedNetworks.address)\r\n    const taskCount = await todoList.methods.taskCount().call();\r\n    setTaskCount(taskCount);\r\n    let receivedTasks = [];\r\n    for (var i = 0; i < taskCount; i++) {\r\n      const task = await todoList.methods.tasks(i).call()\r\n      receivedTasks.push(task);\r\n    }\r\n    storeTasksInRedux(receivedTasks);\r\n    setAccount(accounts[0]);\r\n    addSmartContract(todoList);\r\n    setLoading(false);\r\n  }\r\n\r\n  async function fetchTasks() {\r\n    const taskCount = await smartContract.methods.taskCount().call();\r\n    setTaskCount(taskCount);\r\n    // console.log(taskCount)\r\n    let receivedTasks = [];\r\n    for (var i = 0; i < taskCount; i++) {\r\n      const task = await smartContract.methods.tasks(i).call()\r\n      receivedTasks.push(task);\r\n    }\r\n    // console.log(receivedTasks)\r\n    storeTasksInRedux(receivedTasks);\r\n    setLoading(false);\r\n  }\r\n\r\n  async function createTask(content) {\r\n    setLoading(true);\r\n    smartContract.methods.createTask(content, Date.now(), false, 0).send({ from: account })\r\n      .once('receipt', (receipt) => {\r\n        fetchTasks()\r\n      })\r\n  }\r\n\r\n  async function toggleCompleted(taskId) {\r\n    // console.log(taskId)\r\n    setLoading(true);\r\n    const res = await smartContract.methods.toggleCompleted(taskId, Date.now()).send({ from: account })\r\n      .once('receipt', (receipt) => {\r\n        fetchTasks()\r\n      })\r\n  }\r\n\r\n  async function deleteTask(taskId) {\r\n    // console.log(taskId)\r\n    setLoading(true);\r\n    smartContract.methods.deleteTask(taskId).send({ from: account })\r\n      .once('receipt', (receipt) => {\r\n        fetchTasks()\r\n      })\r\n  }\r\n\r\n  async function commitTasks() {\r\n    setLoading(true);\r\n    console.log(tasksToCreate, tasks, tasksToDelete)\r\n    smartContract.methods.commitTasks(tasksToCreate, tasks, tasksToDelete).send({ from: account })\r\n      .once('receipt', (receipt) => {\r\n        fetchTasks()\r\n      })\r\n  }\r\n\r\n  function checkTask() {\r\n    if (content !== '') {\r\n      createTaskHandler(content)\r\n    }\r\n    else {\r\n      document.getElementById('name-required').classList.remove('is-hidden');\r\n    }\r\n  }\r\n\r\n  function changeName(task) {\r\n    // console.log(task)\r\n    if (!document.getElementById('name-required').classList.contains('is-hidden')) {\r\n      document.getElementById('name-required').classList.add('is-hidden');\r\n    }\r\n    setContent(task);\r\n  }\r\n\r\n  function createTaskHandler(content) {\r\n    if (!ethCommit) {\r\n      createTask(content)\r\n    }\r\n    else {\r\n      const now = Date.now()\r\n      const newTask = [{\r\n        id: 0,\r\n        content: content,\r\n        completed: false,\r\n        date: now,\r\n        timeModified: 0,\r\n    }]\r\n    console.log(tasks, tasksToCreate)\r\n    createTaskInRedux(newTask);\r\n    }\r\n  }\r\n\r\n  function toggleCompletedHandler(task) {\r\n    if (!ethCommit) {\r\n      toggleCompleted(task.id)\r\n    }\r\n    else if (task.id === 0) {\r\n      toggleCompletedToBeCreatedInRedux(task.id, task.content, task.date, Date.now());\r\n    }\r\n    else {\r\n      toggleCompletedInRedux(task.id, Date.now());\r\n    }\r\n  }\r\n\r\n  function deleteTaskHandler(task) {\r\n    if (!ethCommit) {\r\n      deleteTask(task.id)\r\n    }\r\n    else if (task.id === 0) {\r\n      deleteTaskToBeCreatedInRedux(task.id, task.content, task.date);\r\n    }\r\n    else {\r\n      deleteTaskInRedux(task.id)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        loading ?\r\n          <p>Loading...</p>\r\n          :\r\n          <div className='column'>\r\n            <form onSubmit={(event) => {\r\n              event.preventDefault()\r\n              checkTask()\r\n            }}>\r\n              <div className=\"field has-addons\">\r\n                <div className=\"control\">\r\n                  <input\r\n                    id=\"newTask\"\r\n                    onChange={e => changeName(e.target.value)}\r\n                    className=\"input is-link\" type=\"text\" placeholder=\"Add a task...\" />\r\n                </div>\r\n                <div className=\"control\">\r\n                  <input type=\"submit\" className=\"button is-link\" />\r\n                </div>\r\n              </div>\r\n              <p id='name-required' className=\"help is-danger is-hidden\">Invalid task name</p>\r\n              <label className=\"taskTemplate\" className=\"checkbox\">\r\n                <input type=\"checkbox\" className='checkbox-size' onChange={e => setFilterCompleted()} checked={filterCompleted} />\r\n          Filter Completed Tasks\r\n        </label>\r\n              <label className=\"taskTemplate\" className=\"checkbox\">\r\n                <input type=\"checkbox\" className='checkbox-size' onChange={e => changeEthCommit()} checked={ethCommit} />\r\n          Don't commit any changes until I press\r\n          <button className='button is-success is-small' disabled={!ethCommit} style={{ marginLeft: '1rem' }}\r\n                  onClick={(event) => {\r\n                    commitTasks()\r\n                  }}>\r\n                  Commit\r\n                </button>\r\n              </label>\r\n            </form>\r\n            <table className='table is-fullwidth has-text-centered'>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Content</th>\r\n                  <th>Mark Completed</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tasksToCreate.concat(tasks).map((task, key) => {\r\n                  if (filterCompleted && task.completed) {\r\n                    return null;\r\n                  }\r\n                  return (\r\n                    <tr>\r\n                      <td>{task.id.toString().substring(0, 10)}...</td>\r\n                      <td>{task.content}</td>\r\n                      <td>\r\n                        <div className=\"taskTemplate\" className=\"checkbox\" key={key}>\r\n                          <input type=\"checkbox\" className='checkbox-size' onChange={(event) => toggleCompletedHandler(task)} checked={task.completed} />\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <button className='button is-danger is-small'\r\n                          onClick={(event) => {\r\n                            deleteTaskHandler(task)\r\n                          }}>\r\n                          Delete\r\n                </button>\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n                }\r\n              </tbody>\r\n            </table>\r\n            {\r\n              tasksToCreate.concat(tasks).length <= 0 ? <div className='has-text-centered'>If you have tasks, they'll appear here.</div> : null\r\n            }\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  filterCompleted: getFilterCompleted(state),\r\n  ethCommit: getEthCommit(state),\r\n  smartContract: getSmartContract(state),\r\n  tasks: getTasks(state),\r\n  tasksToCreate: getTasksToCreate(state),\r\n  tasksToDelete: getTasksToDelete(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFilterCompleted: () => dispatch(changeFilterCompleted()),\r\n  changeEthCommit: () => dispatch(changeEthCommit()),\r\n  addSmartContract: contract => dispatch(addSmartContract(contract)),\r\n  storeTasksInRedux: tasks => dispatch(storeTasks(tasks)),\r\n  createTaskInRedux: task => dispatch(createTask(task)),\r\n  toggleCompletedInRedux: (id, timeModified) => dispatch(toggleCompleted(id, timeModified)),\r\n  toggleCompletedToBeCreatedInRedux: (id, content, date, timeModified) => dispatch(toggleCompletedToBeCreated(id, content, date, timeModified)),\r\n  deleteTaskInRedux: id => dispatch(deleteTask(id)),\r\n  deleteTaskToBeCreatedInRedux: (id, content, date) => dispatch(deleteTaskToBeCreated(id, content, date))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","import './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n\n  return (\n    <div>\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title has-text-white\">\n            Ethereum Task Manager\n          </p>\n          <p className=\"subtitle has-text-white\">\n            React, Ethereum, and Bulma\n          </p>\n        </div>\n      </section>\n      <div className='section'>\n        <div className='container'>\n          <TodoList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configStore } from './store'\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport './index.css';\nimport App from './App.js';\n\nconst store = configStore()\nconst persistor = persistStore(store)\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate persistor={persistor} loading = {<div>Loading...</div>}>\n            <App />\n        </PersistGate>\n    </Provider>\n, document.getElementById('root'));"],"sourceRoot":""}